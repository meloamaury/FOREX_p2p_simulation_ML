
================================================================================
        FOREX Marketplace Simulation, Analysis and Predictions

		                  --- README / Introduction ----

			                 Amaury de Melo Souza May - 2016
================================================================================

MOTIVATION: This project simulates a peer-to-peer currency marketplace of two currencies. 
The idea is to have a platform where users in different parts of the world can choose they
own exchange rate to exchange their money, without any bank intermidiating the process.
When the two users agree on a exchange rate between them, a "matching" will occur and the 
transaction will take place.

PLATFORM CHARACTERISTICS: A range of market characteristics, e.g. exchange rate variations,
trade frequency and trade amounts, can be chosen and the impact on the marketplace then studied. 
The first part of the project is dedicated to build the code that creates virtual peer-to-peer
marketplace. The second part is dedicated on exploratory data analysis and feature engineering. 
The last part is to demonstrate how Machine Learning techniques can be used to predict whether
an advertised sale placed on the market will be bought or not, and if so how long it takes
for the sale to occur. Finally, a summary of the project is provided.

An outline of the project is shown below, the recommended reading order is

	Part 1: marketplace.ipynb
		      /Soure_Code (This folder contains all the files need to perform the calculations)
	Part 2: Exploratory_data_analysis.ipynb
  
	Part 3: predicting_trade.ipynb

--- Contents ---

	1. Marketplace Simulation:
	
		marketplace/marketplace.ipyb 		- Introduction to the mechanics and rules of the marketplace
		marketplace/marketplace.py		- Python implementation for the marketplace simulation

	2. Exploratory Data Analysis (EDA):

		EDA/data_exploration.ipynb	- Exploring the effects of different exchange rates (constant, sinuosoidal and geometric Brownian Motion)
		exploration/data_exploration_2.ipynb	- Exploring how buyer/seller attributes affects the general trends of sales

		These two notebooks are supported by the programs:

		exploration/marketplace_predictions.py	- Bulk marketplace simulation for many different initial parameters,
							  outputs to directory /prediction/data/ for use in Data Exploration and Predictions
		exploration/dic_gen.py			- Generates Python dictionaries of parameters (saved to directory /prediction/param_dics/)
							  for input into marketplace_predictions.py
		exploration/data/*.csv			- CSV files for use with the prediction notebooks in the next section

	3. Predictions:

		deal_or_no_deal.ipynb  			- Classification algorithms used to predict whether a trader will successfully sell or not
		time_to_sale_prediction.ipynb		- Regression algorithms used to predict the length of time it takes a successful trade to complete
		classification_prediction_table.csv	- Table generated by deal_or_no_deal.ipynb
		time_to_sale_prediction_table.csv	- Table generated by time_to_sale_prediction.ipynb
	
	4. Summary:

		summary.txt

--- Running the Programs and Notebooks ---

Requires Python 2.7 or higher, and IPython notebooks. Uses the libraries sklearn, numpy, scipy, matplotlib and seaborn. 

4. Source Code: 
All the Mablab and Python files to run the marketplace and ML, respectively, if found in the "Source_Code" Directory. Here is a short description of each file to give an overview of all the generators needed for the marketplace.

================================================================================
                      SET OF FILES AND THEIR DESCRIPTION:
================================================================================

ER_generator.m: This function generates the inter-bank rate using a browining motion model.

ER_user.m: This function generates the traders exchange rate for both sides of the market.

Num_users.m: This function generates the number of new traders on both sides of the market.

QuickTrade_gen.m: This function generates randomly generates a logical index for quick-trade 
with a given probability.

Market.m: This function builds the markets for GBP and Euro and calculates the rate available
and the amount of money availabe.

Matching_system.m: This function contains all the conditions considered for matching between
traders on both sides of the market.

TradeLOG_generator.m: This function generates the trade log for all the matching events.
